package staking

import (
	"fmt"
	"math/big"

	"github.com/Dtx-validator/dtx-node/chain"
	"github.com/Dtx-validator/dtx-node/helper/common"
	"github.com/Dtx-validator/dtx-node/helper/hex"
	"github.com/Dtx-validator/dtx-node/helper/keccak"
	"github.com/Dtx-validator/dtx-node/types"
	"github.com/Dtx-validator/dtx-node/validators"
)

var (
	MinValidatorCount = uint64(1)
	MaxValidatorCount = common.MaxSafeJSInt
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)

	return keccak.Keccak256(nil, finalSlice)
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset uint64) []byte {
	bigOffset := big.NewInt(int64(offset))
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/0xPolygon/staking-contracts/
func getStorageIndexes(validator validators.Validator, index int) *StorageIndexes {
	storageIndexes := &StorageIndexes{}
	address := validator.Addr()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(
		address,
		addressToIsValidatorSlot,
	)

	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(
		address,
		addressToStakedAmountSlot,
	)

	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(
		address,
		addressToValidatorIndexSlot,
	)

	storageIndexes.ValidatorBLSPublicKeyIndex = getAddressMapping(
		address,
		addressToBLSPublicKeySlot,
	)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		uint64(index),
	)

	return storageIndexes
}

// setBytesToStorage sets bytes data into storage map from specified base index
func setBytesToStorage(
	storageMap map[types.Hash]types.Hash,
	baseIndexBytes []byte,
	data []byte,
) {
	dataLen := len(data)
	baseIndex := types.BytesToHash(baseIndexBytes)

	if dataLen <= 31 {
		bytes := types.Hash{}

		copy(bytes[:len(data)], data)

		// Set 2*Size at the first byte
		bytes[len(bytes)-1] = byte(dataLen * 2)

		storageMap[baseIndex] = bytes

		return
	}

	// Set size at the base index
	baseSlot := types.Hash{}
	baseSlot[31] = byte(2*dataLen + 1)
	storageMap[baseIndex] = baseSlot

	zeroIndex := keccak.Keccak256(nil, baseIndexBytes)
	numBytesInSlot := 256 / 8

	for i := 0; i < dataLen; i++ {
		offset := i / numBytesInSlot

		slotIndex := types.BytesToHash(getIndexWithOffset(zeroIndex, uint64(offset)))
		byteIndex := i % numBytesInSlot

		slot := storageMap[slotIndex]
		slot[byteIndex] = data[i]

		storageMap[slotIndex] = slot
	}
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	MinValidatorCount uint64
	MaxValidatorCount uint64
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	ValidatorsIndex              []byte // []address
	ValidatorBLSPublicKeyIndex   []byte // mapping(address => byte[])
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	validatorsSlot              = int64(0) // Slot 0
	addressToIsValidatorSlot    = int64(1) // Slot 1
	addressToStakedAmountSlot   = int64(2) // Slot 2
	addressToValidatorIndexSlot = int64(3) // Slot 3
	stakedAmountSlot            = int64(4) // Slot 4
	minNumValidatorSlot         = int64(5) // Slot 5
	maxNumValidatorSlot         = int64(6) // Slot 6
	addressToBLSPublicKeySlot   = int64(7) // Slot 7
)

const (
	DefaultStakedBalance = "0x0" // 0 ETH
	//nolint: lll
	StakingSCBytecode = "0x6080604052600436106101185760003560e01c80637a6eea37116100a0578063d94c111b11610064578063d94c111b1461040a578063e387a7ed14610433578063e804fbf61461045e578063f90ecacc14610489578063facd743b146104c657610186565b80637a6eea37146103215780637dceceb81461034c578063af6da36e14610389578063c795c077146103b4578063ca1e7819146103df57610186565b8063373d6132116100e7578063373d6132146102595780633a4b66f1146102845780633c561f041461028e57806351a9ab32146102b9578063714ff425146102f657610186565b806302b751991461018b578063065ae171146101c85780632367f6b5146102055780632def66201461024257610186565b366101865761013c3373ffffffffffffffffffffffffffffffffffffffff16610503565b1561017c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610173906112fb565b60405180910390fd5b610184610526565b005b600080fd5b34801561019757600080fd5b506101b260048036038101906101ad919061138d565b6105fd565b6040516101bf91906113d3565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea919061138d565b610615565b6040516101fc9190611409565b60405180910390f35b34801561021157600080fd5b5061022c6004803603810190610227919061138d565b610635565b60405161023991906113d3565b60405180910390f35b34801561024e57600080fd5b5061025761067e565b005b34801561026557600080fd5b5061026e610769565b60405161027b91906113d3565b60405180910390f35b61028c610773565b005b34801561029a57600080fd5b506102a36107dc565b6040516102b09190611576565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db919061138d565b610982565b6040516102ed91906115e2565b60405180910390f35b34801561030257600080fd5b5061030b610a22565b60405161031891906113d3565b60405180910390f35b34801561032d57600080fd5b50610336610a2c565b604051610343919061162f565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e919061138d565b610a3a565b60405161038091906113d3565b60405180910390f35b34801561039557600080fd5b5061039e610a52565b6040516103ab91906113d3565b60405180910390f35b3480156103c057600080fd5b506103c9610a58565b6040516103d691906113d3565b60405180910390f35b3480156103eb57600080fd5b506103f4610a5e565b6040516104019190611708565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c919061185f565b610aec565b005b34801561043f57600080fd5b50610448610b8a565b60405161045591906113d3565b60405180910390f35b34801561046a57600080fd5b50610473610b90565b60405161048091906113d3565b60405180910390f35b34801561049557600080fd5b506104b060048036038101906104ab91906118d4565b610b9a565b6040516104bd9190611910565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e8919061138d565b610bd9565b6040516104fa9190611409565b60405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b3460046000828254610538919061195a565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058e919061195a565b9250508190555061059e33610c2f565b156105ad576105ac33610ca9565b5b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d346040516105f391906113d3565b60405180910390a2565b60036020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61069d3373ffffffffffffffffffffffffffffffffffffffff16610503565b156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d4906112fb565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906119da565b60405180910390fd5b610767610df8565b565b6000600454905090565b6107923373ffffffffffffffffffffffffffffffffffffffff16610503565b156107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c9906112fb565b60405180910390fd5b6107da610526565b565b60606000808054905067ffffffffffffffff8111156107fe576107fd611734565b5b60405190808252806020026020018201604052801561083157816020015b606081526020019060019003908161081c5790505b50905060005b60008054905081101561097a576007600080838154811061085b5761085a6119fa565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546108cb90611a58565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790611a58565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b505050505082828151811061095c5761095b6119fa565b5b6020026020010181905250808061097290611a89565b915050610837565b508091505090565b600760205280600052604060002060009150905080546109a190611a58565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90611a58565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b505050505081565b6000600554905090565b69021e19e0c9bab240000081565b60026020528060005260406000206000915090505481565b60065481565b60055481565b60606000805480602002602001604051908101604052809291908181526020018280548015610ae257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a98575b5050505050905090565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610b389190611c7d565b503373ffffffffffffffffffffffffffffffffffffffff167f472da4d064218fa97032725fbcff922201fa643fed0765b5ffe0ceef63d7b3dc82604051610b7f91906115e2565b60405180910390a250565b60045481565b6000600654905090565b60008181548110610baa57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610c3a82610f4a565b158015610ca2575069021e19e0c9bab24000006fffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b9050919050565b60065460008054905010610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990611dc1565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060046000828254610e939190611de1565b92505081905550610ea333610f4a565b15610eb257610eb133610fa0565b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ef8573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7582604051610f3f91906113d3565b60405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60055460008054905011610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090611e87565b60405180910390fd5b600080549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061106f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106690611ef3565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000805490506110c79190611de1565b90508082146111b55760008082815481106110e5576110e46119fa565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060008481548110611127576111266119fa565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600080548061126457611263611f13565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600082825260208201905092915050565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b60006112e5601a8361129e565b91506112f0826112af565b602082019050919050565b60006020820190508181036000830152611314816112d8565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061135a8261132f565b9050919050565b61136a8161134f565b811461137557600080fd5b50565b60008135905061138781611361565b92915050565b6000602082840312156113a3576113a2611325565b5b60006113b184828501611378565b91505092915050565b6000819050919050565b6113cd816113ba565b82525050565b60006020820190506113e860008301846113c4565b92915050565b60008115159050919050565b611403816113ee565b82525050565b600060208201905061141e60008301846113fa565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561148a57808201518184015260208101905061146f565b60008484015250505050565b6000601f19601f8301169050919050565b60006114b282611450565b6114bc818561145b565b93506114cc81856020860161146c565b6114d581611496565b840191505092915050565b60006114ec83836114a7565b905092915050565b6000602082019050919050565b600061150c82611424565b611516818561142f565b93508360208202850161152885611440565b8060005b85811015611564578484038952815161154585826114e0565b9450611550836114f4565b925060208a0199505060018101905061152c565b50829750879550505050505092915050565b600060208201905081810360008301526115908184611501565b905092915050565b600082825260208201905092915050565b60006115b482611450565b6115be8185611598565b93506115ce81856020860161146c565b6115d781611496565b840191505092915050565b600060208201905081810360008301526115fc81846115a9565b905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61162981611604565b82525050565b60006020820190506116446000830184611620565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61167f8161134f565b82525050565b60006116918383611676565b60208301905092915050565b6000602082019050919050565b60006116b58261164a565b6116bf8185611655565b93506116ca83611666565b8060005b838110156116fb5781516116e28882611685565b97506116ed8361169d565b9250506001810190506116ce565b5085935050505092915050565b6000602082019050818103600083015261172281846116aa565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61176c82611496565b810181811067ffffffffffffffff8211171561178b5761178a611734565b5b80604052505050565b600061179e61131b565b90506117aa8282611763565b919050565b600067ffffffffffffffff8211156117ca576117c9611734565b5b6117d382611496565b9050602081019050919050565b82818337600083830152505050565b60006118026117fd846117af565b611794565b90508281526020810184848401111561181e5761181d61172f565b5b6118298482856117e0565b509392505050565b600082601f8301126118465761184561172a565b5b81356118568482602086016117ef565b91505092915050565b60006020828403121561187557611874611325565b5b600082013567ffffffffffffffff8111156118935761189261132a565b5b61189f84828501611831565b91505092915050565b6118b1816113ba565b81146118bc57600080fd5b50565b6000813590506118ce816118a8565b92915050565b6000602082840312156118ea576118e9611325565b5b60006118f8848285016118bf565b91505092915050565b61190a8161134f565b82525050565b60006020820190506119256000830184611901565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611965826113ba565b9150611970836113ba565b92508282019050808211156119885761198761192b565b5b92915050565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b60006119c4601d8361129e565b91506119cf8261198e565b602082019050919050565b600060208201905081810360008301526119f3816119b7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a7057607f821691505b602082108103611a8357611a82611a29565b5b50919050565b6000611a94826113ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ac657611ac561192b565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611b337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611af6565b611b3d8683611af6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611b7a611b75611b70846113ba565b611b55565b6113ba565b9050919050565b6000819050919050565b611b9483611b5f565b611ba8611ba082611b81565b848454611b03565b825550505050565b600090565b611bbd611bb0565b611bc8818484611b8b565b505050565b5b81811015611bec57611be1600082611bb5565b600181019050611bce565b5050565b601f821115611c3157611c0281611ad1565b611c0b84611ae6565b81016020851015611c1a578190505b611c2e611c2685611ae6565b830182611bcd565b50505b505050565b600082821c905092915050565b6000611c5460001984600802611c36565b1980831691505092915050565b6000611c6d8383611c43565b9150826002028217905092915050565b611c8682611450565b67ffffffffffffffff811115611c9f57611c9e611734565b5b611ca98254611a58565b611cb4828285611bf0565b600060209050601f831160018114611ce75760008415611cd5578287015190505b611cdf8582611c61565b865550611d47565b601f198416611cf586611ad1565b60005b82811015611d1d57848901518255600182019150602085019450602081019050611cf8565b86831015611d3a5784890151611d36601f891682611c43565b8355505b6001600288020188555050505b505050505050565b7f56616c696461746f72207365742068617320726561636865642066756c6c206360008201527f6170616369747900000000000000000000000000000000000000000000000000602082015250565b6000611dab60278361129e565b9150611db682611d4f565b604082019050919050565b60006020820190508181036000830152611dda81611d9e565b9050919050565b6000611dec826113ba565b9150611df7836113ba565b9250828203905081811115611e0f57611e0e61192b565b5b92915050565b7f56616c696461746f72732063616e2774206265206c657373207468616e20746860008201527f65206d696e696d756d2072657175697265642076616c696461746f72206e756d602082015250565b6000611e7160408361129e565b9150611e7c82611e15565b604082019050919050565b60006020820190508181036000830152611ea081611e64565b9050919050565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b6000611edd60128361129e565b9150611ee882611ea7565b602082019050919050565b60006020820190508181036000830152611f0c81611ed0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204d404392784f5bc5c34c0f8d7c00e437d8f654795e3bc890ef82c04717a5de0964736f6c63430008110033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(
	vals validators.Validators,
	params PredeployParams,
) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/0xPolygon/staking-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)
	bigMinNumValidators := big.NewInt(int64(params.MinValidatorCount))
	bigMaxNumValidators := big.NewInt(int64(params.MaxValidatorCount))
	valsLen := big.NewInt(0)

	if vals != nil {
		valsLen = big.NewInt(int64(vals.Len()))

		for idx := 0; idx < vals.Len(); idx++ {
			validator := vals.At(uint64(idx))

			// Update the total staked amount
			stakedAmount = stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

			// Get the storage indexes
			storageIndexes := getStorageIndexes(validator, idx)

			// Set the value for the validators array
			storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
				types.BytesToHash(
					validator.Addr().Bytes(),
				)

			if blsValidator, ok := validator.(*validators.BLSValidator); ok {
				setBytesToStorage(
					storageMap,
					storageIndexes.ValidatorBLSPublicKeyIndex,
					blsValidator.BLSPublicKey,
				)
			}

			// Set the value for the address -> validator array index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
				types.BytesToHash(bigTrueValue.Bytes())

			// Set the value for the address -> staked amount mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
				types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

			// Set the value for the address -> validator index mapping
			storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
				types.StringToHash(hex.EncodeUint64(uint64(idx)))
		}
	}

	// Set the value for the total staked amount
	storageMap[types.BytesToHash(big.NewInt(stakedAmountSlot).Bytes())] =
		types.BytesToHash(stakedAmount.Bytes())

	// Set the value for the size of the validators array
	storageMap[types.BytesToHash(big.NewInt(validatorsSlot).Bytes())] =
		types.BytesToHash(valsLen.Bytes())

	// Set the value for the minimum number of validators
	storageMap[types.BytesToHash(big.NewInt(minNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMinNumValidators.Bytes())

	// Set the value for the maximum number of validators
	storageMap[types.BytesToHash(big.NewInt(maxNumValidatorSlot).Bytes())] =
		types.BytesToHash(bigMaxNumValidators.Bytes())

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
